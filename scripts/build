#!/usr/bin/env python3

import argparse as ap
import subprocess as sp
import typing as tp
import os

parser = ap.ArgumentParser(
    description="""
Build the Docker images under the IMAGESDIR directory (default: .).
Label each built image with the given VERSION number (default: latest).
The build takes advantage of any reusable layer from previously built images.
"""
)

builds = ["toolchain", "base", "golang", "python", "qt", "rust", "dotnet6"]
requires = {
    "toolchain": None,
    "base": "toolchain",
    "golang": "base",
    "python": "base",
    "qt": "base",
    "rust": "base",
    "dotnet6": "toolchain",
}

parser.add_argument(
    "-p", help="Publish built images to GitHub Container Registry", action="store_true"
)
parser.add_argument("-g", help="Use GitHub Actions for caching", action="store_true")
parser.add_argument("-d", help="Set image directory", default=".", metavar="IMAGESDIR")
parser.add_argument(
    "-s", help="Just build single image given as argument", choices=builds
)
parser.add_argument(
    "-v", help="Set version number", default="latest", metavar="VERSION"
)
parser.add_argument("-c", help="Set build context", default=None, metavar="CONTEXT")


def run_cmd(line: list[str]) -> None:
    p = sp.Popen(
        line,
        stdout=sp.PIPE,
        stderr=sp.STDOUT,
        encoding="utf-8",
        errors="replace",
    )
    while True:
        realtime_output = p.stdout.readline()
        if realtime_output == "" and p.poll() is not None:
            break
        if realtime_output:
            print(realtime_output.strip(), flush=True)
    if p.returncode != 0:
        exit(p.returncode)


def build(
    image: str,
    version: str,
    publish: bool,
    github: bool,
    _from: tp.Optional[str] = None,
    context: tp.Optional[str] = None,
) -> None:
    cmd: list[str] = [
        "docker",
        "buildx",
        "build",
        "--build-arg",
        "BUILDKIT_INLINE_CACHE=1",
    ]
    if _from:
        cmd.extend(["--build-arg", f"FROM=ghcr.io/toltec-dev/{_from}:{version}"])
    if github:
        cmd.extend(["--cache-from", f"type=gha,scope={image}"])
        cmd.extend(["--cache-to", f"type=gha,mode=max,scope={image}"])
    if context:
        cmd.extend(["--build-context", context])
    if publish:
        cmd.extend(["--push"])
    else:
        cmd.extend(["--load"])
    cmd.extend(["--tag", f"ghcr.io/toltec-dev/{image}:{version}", "."])
    run_cmd(cmd)


args = parser.parse_args()
curdir = os.getcwd()
os.chdir(args.d)
workdir = os.getcwd()
if args.s:
    os.chdir(args.s)
    build(args.s, args.v, args.p, args.g, requires[args.s], args.c)
    os.chdir(workdir)
else:
    for i in builds:
        print(f"Building {i}...")
        os.chdir(i)
        build(i, args.v, args.p, args.g, requires[i], args.c)
        os.chdir(workdir)
os.chdir(curdir)
